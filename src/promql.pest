left_paren     = { "(" }
right_paren    = { ")" }
left_brace     = { "{" }
right_brace    = { "}" }
left_bracket   = { "[" }
right_bracket  = { "]" }
comma          = { "," }
eql            = { "=" }
colon          = { ":" }
semicolon      = { ";" }
blank          = { "_" }
times          = { "x" }

sub            = { "-" }
add            = { "+" }
mul            = { "*" }
modulo         = { "%" }
div            = { "/" }
eqlc           = { "==" }
neq            = { "!=" }
lte            = { "<=" }
lss            = { "<" }
gte            = { ">=" }
gtr            = { ">" }
eql_regex      = { "=~" }
neq_regex      = { "!~" }
pow            = { "^" }


// Operators.
and            = { "and" }
or             = { "or" }
unless         = { "unless" }

// Aggregators.
sum            = { "sum" }
avg            = { "avg" }
count          = { "count" }
min            = { "min" }
max            = { "max" }
group          = { "group" }
stddev         = { "stddev" }
stdvar         = { "stdvar" }
topk           = { "topk" }
bottomk        = { "bottomk" }
count_values   = { "count_values" }
quantile       = { "quantile" }

// Keywords.
offset         = { "offset" }
by             = { "by" }
without        = { "without" }
on             = { "on" }
ignoring       = { "ignoring" }
group_left     = { "group_left" }
group_right    = { "group_right" }
boolen         = { "bool" }

// Preprocessors.
start          = { "start" }
end            = { "end" }

// Literals

number = @{
	("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
	~ ("." ~ ASCII_DIGIT+)?
	~ (^"e" ~ (add | sub)? ~ ASCII_DIGIT+)?
}

signed_number = { (add | sub) ~ number }
signed_or_unsigned_number = { (add | sub)? ~ number }

inf = { "inf" }
nan = { "nan" }

uint = { ASCII_DIGIT+ }

string_literal = ${"\"" ~ (char_raw | char_escaped)* ~ "\""}
char_raw = { !("\\" | "\"") ~ ANY }

char_escaped = _{"\\" ~ ("x" ~ char_byte_inner | "u{" ~ char_unicode_inner ~ "}" | char_predefined_inner) }
char_byte_inner = { ASCII_HEX_DIGIT{2} }
char_unicode_inner = { ASCII_HEX_DIGIT{1, 6} }
char_predefined_inner = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }


duration_unit = { "ns" | "us" | "ms" | "s" | "m" | "h" | "d" | "w" | "y" }
duration_part = ${ uint ~ duration_unit }
duration = ${ duration_part+ | uint }

// Main
input = {SOI ~ EOI}
